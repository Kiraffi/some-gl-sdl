fn vkCreateInstance(pCreateInfo: * const VkInstanceCreateInfo, pAllocator: * const VkAllocationCallbacks, pInstance: * mut VkInstance, ) -> VkResult;
fn vkDestroyInstance(instance: VkInstance, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkEnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: * mut u32, pPhysicalDevices: * mut VkPhysicalDevice, ) -> VkResult;
fn vkGetDeviceProcAddr(device: VkDevice, pName: * const c_uchar, ) -> PFN_vkVoidFunction;
fn vkGetInstanceProcAddr(instance: VkInstance, pName: * const c_uchar, ) -> PFN_vkVoidFunction;
fn vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: * mut VkPhysicalDeviceProperties, ) -> c_void;
fn vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: * mut u32, pQueueFamilyProperties: * mut VkQueueFamilyProperties, ) -> c_void;
fn vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: * mut VkPhysicalDeviceMemoryProperties, ) -> c_void;
fn vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: * mut VkPhysicalDeviceFeatures, ) -> c_void;
fn vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: * mut VkFormatProperties, ) -> c_void;
fn vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, name_type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: * mut VkImageFormatProperties, ) -> VkResult;
fn vkCreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: * const VkDeviceCreateInfo, pAllocator: * const VkAllocationCallbacks, pDevice: * mut VkDevice, ) -> VkResult;
fn vkDestroyDevice(device: VkDevice, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkEnumerateInstanceVersion(pApiVersion: * mut u32, ) -> VkResult;
fn vkEnumerateInstanceLayerProperties(pPropertyCount: * mut u32, pProperties: * mut VkLayerProperties, ) -> VkResult;
fn vkEnumerateInstanceExtensionProperties(pLayerName: * const c_uchar, pPropertyCount: * mut u32, pProperties: * mut VkExtensionProperties, ) -> VkResult;
fn vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: * mut u32, pProperties: * mut VkLayerProperties, ) -> VkResult;
fn vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: * const c_uchar, pPropertyCount: * mut u32, pProperties: * mut VkExtensionProperties, ) -> VkResult;
fn vkGetDeviceQueue(device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: * mut VkQueue, ) -> c_void;
fn vkQueueSubmit(queue: VkQueue, submitCount: u32, pSubmits: * const VkSubmitInfo, fence: VkFence, ) -> VkResult;
fn vkQueueWaitIdle(queue: VkQueue, ) -> VkResult;
fn vkDeviceWaitIdle(device: VkDevice, ) -> VkResult;
fn vkAllocateMemory(device: VkDevice, pAllocateInfo: * const VkMemoryAllocateInfo, pAllocator: * const VkAllocationCallbacks, pMemory: * mut VkDeviceMemory, ) -> VkResult;
fn vkFreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkMapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: * mut * mut c_void, ) -> VkResult;
fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory, ) -> c_void;
fn vkFlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: * const VkMappedMemoryRange, ) -> VkResult;
fn vkInvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: * const VkMappedMemoryRange, ) -> VkResult;
fn vkGetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: * mut VkDeviceSize, ) -> c_void;
fn vkGetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: * mut VkMemoryRequirements, ) -> c_void;
fn vkBindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, ) -> VkResult;
fn vkGetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: * mut VkMemoryRequirements, ) -> c_void;
fn vkBindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, ) -> VkResult;
fn vkGetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: * mut u32, pSparseMemoryRequirements: * mut VkSparseImageMemoryRequirements, ) -> c_void;
fn vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, name_type: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: * mut u32, pProperties: * mut VkSparseImageFormatProperties, ) -> c_void;
fn vkQueueBindSparse(queue: VkQueue, bindInfoCount: u32, pBindInfo: * const VkBindSparseInfo, fence: VkFence, ) -> VkResult;
fn vkCreateFence(device: VkDevice, pCreateInfo: * const VkFenceCreateInfo, pAllocator: * const VkAllocationCallbacks, pFence: * mut VkFence, ) -> VkResult;
fn vkDestroyFence(device: VkDevice, fence: VkFence, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: * const VkFence, ) -> VkResult;
fn vkGetFenceStatus(device: VkDevice, fence: VkFence, ) -> VkResult;
fn vkWaitForFences(device: VkDevice, fenceCount: u32, pFences: * const VkFence, waitAll: VkBool32, timeout: u64, ) -> VkResult;
fn vkCreateSemaphore(device: VkDevice, pCreateInfo: * const VkSemaphoreCreateInfo, pAllocator: * const VkAllocationCallbacks, pSemaphore: * mut VkSemaphore, ) -> VkResult;
fn vkDestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateEvent(device: VkDevice, pCreateInfo: * const VkEventCreateInfo, pAllocator: * const VkAllocationCallbacks, pEvent: * mut VkEvent, ) -> VkResult;
fn vkDestroyEvent(device: VkDevice, event: VkEvent, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetEventStatus(device: VkDevice, event: VkEvent, ) -> VkResult;
fn vkSetEvent(device: VkDevice, event: VkEvent, ) -> VkResult;
fn vkResetEvent(device: VkDevice, event: VkEvent, ) -> VkResult;
fn vkCreateQueryPool(device: VkDevice, pCreateInfo: * const VkQueryPoolCreateInfo, pAllocator: * const VkAllocationCallbacks, pQueryPool: * mut VkQueryPool, ) -> VkResult;
fn vkDestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: * mut c_void, stride: VkDeviceSize, flags: VkQueryResultFlags, ) -> VkResult;
fn vkResetQueryPool(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, ) -> c_void;
fn vkCreateBuffer(device: VkDevice, pCreateInfo: * const VkBufferCreateInfo, pAllocator: * const VkAllocationCallbacks, pBuffer: * mut VkBuffer, ) -> VkResult;
fn vkDestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateBufferView(device: VkDevice, pCreateInfo: * const VkBufferViewCreateInfo, pAllocator: * const VkAllocationCallbacks, pView: * mut VkBufferView, ) -> VkResult;
fn vkDestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateImage(device: VkDevice, pCreateInfo: * const VkImageCreateInfo, pAllocator: * const VkAllocationCallbacks, pImage: * mut VkImage, ) -> VkResult;
fn vkDestroyImage(device: VkDevice, image: VkImage, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: * const VkImageSubresource, pLayout: * mut VkSubresourceLayout, ) -> c_void;
fn vkCreateImageView(device: VkDevice, pCreateInfo: * const VkImageViewCreateInfo, pAllocator: * const VkAllocationCallbacks, pView: * mut VkImageView, ) -> VkResult;
fn vkDestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateShaderModule(device: VkDevice, pCreateInfo: * const VkShaderModuleCreateInfo, pAllocator: * const VkAllocationCallbacks, pShaderModule: * mut VkShaderModule, ) -> VkResult;
fn vkDestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreatePipelineCache(device: VkDevice, pCreateInfo: * const VkPipelineCacheCreateInfo, pAllocator: * const VkAllocationCallbacks, pPipelineCache: * mut VkPipelineCache, ) -> VkResult;
fn vkDestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: * mut usize, pData: * mut c_void, ) -> VkResult;
fn vkMergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: * const VkPipelineCache, ) -> VkResult;
fn vkCreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: * const VkGraphicsPipelineCreateInfo, pAllocator: * const VkAllocationCallbacks, pPipelines: * mut VkPipeline, ) -> VkResult;
fn vkCreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: * const VkComputePipelineCreateInfo, pAllocator: * const VkAllocationCallbacks, pPipelines: * mut VkPipeline, ) -> VkResult;
fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: * mut VkExtent2D, ) -> VkResult;
fn vkDestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreatePipelineLayout(device: VkDevice, pCreateInfo: * const VkPipelineLayoutCreateInfo, pAllocator: * const VkAllocationCallbacks, pPipelineLayout: * mut VkPipelineLayout, ) -> VkResult;
fn vkDestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateSampler(device: VkDevice, pCreateInfo: * const VkSamplerCreateInfo, pAllocator: * const VkAllocationCallbacks, pSampler: * mut VkSampler, ) -> VkResult;
fn vkDestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateDescriptorSetLayout(device: VkDevice, pCreateInfo: * const VkDescriptorSetLayoutCreateInfo, pAllocator: * const VkAllocationCallbacks, pSetLayout: * mut VkDescriptorSetLayout, ) -> VkResult;
fn vkDestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateDescriptorPool(device: VkDevice, pCreateInfo: * const VkDescriptorPoolCreateInfo, pAllocator: * const VkAllocationCallbacks, pDescriptorPool: * mut VkDescriptorPool, ) -> VkResult;
fn vkDestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags, ) -> VkResult;
fn vkAllocateDescriptorSets(device: VkDevice, pAllocateInfo: * const VkDescriptorSetAllocateInfo, pDescriptorSets: * mut VkDescriptorSet, ) -> VkResult;
fn vkFreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: * const VkDescriptorSet, ) -> VkResult;
fn vkUpdateDescriptorSets(device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: * const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: * const VkCopyDescriptorSet, ) -> c_void;
fn vkCreateFramebuffer(device: VkDevice, pCreateInfo: * const VkFramebufferCreateInfo, pAllocator: * const VkAllocationCallbacks, pFramebuffer: * mut VkFramebuffer, ) -> VkResult;
fn vkDestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateRenderPass(device: VkDevice, pCreateInfo: * const VkRenderPassCreateInfo, pAllocator: * const VkAllocationCallbacks, pRenderPass: * mut VkRenderPass, ) -> VkResult;
fn vkDestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: * mut VkExtent2D, ) -> c_void;
fn vkCreateCommandPool(device: VkDevice, pCreateInfo: * const VkCommandPoolCreateInfo, pAllocator: * const VkAllocationCallbacks, pCommandPool: * mut VkCommandPool, ) -> VkResult;
fn vkDestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags, ) -> VkResult;
fn vkAllocateCommandBuffers(device: VkDevice, pAllocateInfo: * const VkCommandBufferAllocateInfo, pCommandBuffers: * mut VkCommandBuffer, ) -> VkResult;
fn vkFreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: * const VkCommandBuffer, ) -> c_void;
fn vkBeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: * const VkCommandBufferBeginInfo, ) -> VkResult;
fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer, ) -> VkResult;
fn vkResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags, ) -> VkResult;
fn vkCmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, ) -> c_void;
fn vkCmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: * const VkViewport, ) -> c_void;
fn vkCmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: * const VkRect2D, ) -> c_void;
fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32, ) -> c_void;
fn vkCmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32, ) -> c_void;
fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: const f32, ) -> c_void;
fn vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32, ) -> c_void;
fn vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32, ) -> c_void;
fn vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32, ) -> c_void;
fn vkCmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32, ) -> c_void;
fn vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: * const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: * const u32, ) -> c_void;
fn vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType, ) -> c_void;
fn vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: * const VkBuffer, pOffsets: * const VkDeviceSize, ) -> c_void;
fn vkCmdDraw(commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32, ) -> c_void;
fn vkCmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32, ) -> c_void;
fn vkCmdDrawMultiEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pVertexInfo: * const VkMultiDrawInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, ) -> c_void;
fn vkCmdDrawMultiIndexedEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pIndexInfo: * const VkMultiDrawIndexedInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, pVertexOffset: * const i32, ) -> c_void;
fn vkCmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32, ) -> c_void;
fn vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32, ) -> c_void;
fn vkCmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32, ) -> c_void;
fn vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, ) -> c_void;
fn vkCmdSubpassShadingHUAWEI(commandBuffer: VkCommandBuffer, ) -> c_void;
fn vkCmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: * const VkBufferCopy, ) -> c_void;
fn vkCmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: * const VkImageCopy, ) -> c_void;
fn vkCmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: * const VkImageBlit, filter: VkFilter, ) -> c_void;
fn vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: * const VkBufferImageCopy, ) -> c_void;
fn vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: * const VkBufferImageCopy, ) -> c_void;
fn vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: * const c_void, ) -> c_void;
fn vkCmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32, ) -> c_void;
fn vkCmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: * const VkClearColorValue, rangeCount: u32, pRanges: * const VkImageSubresourceRange, ) -> c_void;
fn vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: * const VkClearDepthStencilValue, rangeCount: u32, pRanges: * const VkImageSubresourceRange, ) -> c_void;
fn vkCmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: * const VkClearAttachment, rectCount: u32, pRects: * const VkClearRect, ) -> c_void;
fn vkCmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: * const VkImageResolve, ) -> c_void;
fn vkCmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags, ) -> c_void;
fn vkCmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags, ) -> c_void;
fn vkCmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: * const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: * const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: * const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: * const VkImageMemoryBarrier, ) -> c_void;
fn vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: * const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: * const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: * const VkImageMemoryBarrier, ) -> c_void;
fn vkCmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, ) -> c_void;
fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, ) -> c_void;
fn vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: * const VkConditionalRenderingBeginInfoEXT, ) -> c_void;
fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer, ) -> c_void;
fn vkCmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, ) -> c_void;
fn vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32, ) -> c_void;
fn vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags, ) -> c_void;
fn vkCmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: * const c_void, ) -> c_void;
fn vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: * const VkRenderPassBeginInfo, contents: VkSubpassContents, ) -> c_void;
fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents, ) -> c_void;
fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer, ) -> c_void;
fn vkCmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: * const VkCommandBuffer, ) -> c_void;
fn vkCreateAndroidSurfaceKHR(instance: VkInstance, pCreateInfo: * const VkAndroidSurfaceCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: * mut u32, pProperties: * mut VkDisplayPropertiesKHR, ) -> VkResult;
fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: * mut u32, pProperties: * mut VkDisplayPlanePropertiesKHR, ) -> VkResult;
fn vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: * mut u32, pDisplays: * mut VkDisplayKHR, ) -> VkResult;
fn vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: * mut u32, pProperties: * mut VkDisplayModePropertiesKHR, ) -> VkResult;
fn vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: * const VkDisplayModeCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pMode: * mut VkDisplayModeKHR, ) -> VkResult;
fn vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: * mut VkDisplayPlaneCapabilitiesKHR, ) -> VkResult;
fn vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance, pCreateInfo: * const VkDisplaySurfaceCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkCreateSharedSwapchainsKHR(device: VkDevice, swapchainCount: u32, pCreateInfos: * const VkSwapchainCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSwapchains: * mut VkSwapchainKHR, ) -> VkResult;
fn vkDestroySurfaceKHR(instance: VkInstance, surface: VkSurfaceKHR, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: * mut VkBool32, ) -> VkResult;
fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: * mut VkSurfaceCapabilitiesKHR, ) -> VkResult;
fn vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: * mut u32, pSurfaceFormats: * mut VkSurfaceFormatKHR, ) -> VkResult;
fn vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: * mut u32, pPresentModes: * mut VkPresentModeKHR, ) -> VkResult;
fn vkCreateSwapchainKHR(device: VkDevice, pCreateInfo: * const VkSwapchainCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSwapchain: * mut VkSwapchainKHR, ) -> VkResult;
fn vkDestroySwapchainKHR(device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetSwapchainImagesKHR(device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: * mut u32, pSwapchainImages: * mut VkImage, ) -> VkResult;
fn vkAcquireNextImageKHR(device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: * mut u32, ) -> VkResult;
fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: * const VkPresentInfoKHR, ) -> VkResult;
fn vkCreateViSurfaceNN(instance: VkInstance, pCreateInfo: * const VkViSurfaceCreateInfoNN, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkCreateWaylandSurfaceKHR(instance: VkInstance, pCreateInfo: * const VkWaylandSurfaceCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, display: * mut wl_display, ) -> VkBool32;
fn vkCreateWin32SurfaceKHR(instance: VkInstance, pCreateInfo: * const VkWin32SurfaceCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, ) -> VkBool32;
fn vkCreateXlibSurfaceKHR(instance: VkInstance, pCreateInfo: * const VkXlibSurfaceCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, dpy: * mut Display, visualID: VisualID, ) -> VkBool32;
fn vkCreateXcbSurfaceKHR(instance: VkInstance, pCreateInfo: * const VkXcbSurfaceCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, connection: * mut xcb_connection_t, visual_id: xcb_visualid_t, ) -> VkBool32;
fn vkCreateDirectFBSurfaceEXT(instance: VkInstance, pCreateInfo: * const VkDirectFBSurfaceCreateInfoEXT, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, dfb: * mut IDirectFB, ) -> VkBool32;
fn vkCreateImagePipeSurfaceFUCHSIA(instance: VkInstance, pCreateInfo: * const VkImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkCreateStreamDescriptorSurfaceGGP(instance: VkInstance, pCreateInfo: * const VkStreamDescriptorSurfaceCreateInfoGGP, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkCreateScreenSurfaceQNX(instance: VkInstance, pCreateInfo: * const VkScreenSurfaceCreateInfoQNX, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, window: * mut _screen_window, ) -> VkBool32;
fn vkCreateDebugReportCallbackEXT(instance: VkInstance, pCreateInfo: * const VkDebugReportCallbackCreateInfoEXT, pAllocator: * const VkAllocationCallbacks, pCallback: * mut VkDebugReportCallbackEXT, ) -> VkResult;
fn vkDestroyDebugReportCallbackEXT(instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkDebugReportMessageEXT(instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: * const c_uchar, pMessage: * const c_uchar, ) -> c_void;
fn vkDebugMarkerSetObjectNameEXT(device: VkDevice, pNameInfo: * const VkDebugMarkerObjectNameInfoEXT, ) -> VkResult;
fn vkDebugMarkerSetObjectTagEXT(device: VkDevice, pTagInfo: * const VkDebugMarkerObjectTagInfoEXT, ) -> VkResult;
fn vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: * const VkDebugMarkerMarkerInfoEXT, ) -> c_void;
fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer, ) -> c_void;
fn vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: * const VkDebugMarkerMarkerInfoEXT, ) -> c_void;
fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice, format: VkFormat, name_type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: * mut VkExternalImageFormatPropertiesNV, ) -> VkResult;
fn vkGetMemoryWin32HandleNV(device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: * mut HANDLE, ) -> VkResult;
fn vkCmdExecuteGeneratedCommandsNV(commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: * const VkGeneratedCommandsInfoNV, ) -> c_void;
fn vkCmdPreprocessGeneratedCommandsNV(commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: * const VkGeneratedCommandsInfoNV, ) -> c_void;
fn vkCmdBindPipelineShaderGroupNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: u32, ) -> c_void;
fn vkGetGeneratedCommandsMemoryRequirementsNV(device: VkDevice, pInfo: * const VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: * mut VkMemoryRequirements2, ) -> c_void;
fn vkCreateIndirectCommandsLayoutNV(device: VkDevice, pCreateInfo: * const VkIndirectCommandsLayoutCreateInfoNV, pAllocator: * const VkAllocationCallbacks, pIndirectCommandsLayout: * mut VkIndirectCommandsLayoutNV, ) -> VkResult;
fn vkDestroyIndirectCommandsLayoutNV(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: * mut VkPhysicalDeviceFeatures2, ) -> c_void;
fn vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: * mut VkPhysicalDeviceProperties2, ) -> c_void;
fn vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: * mut VkFormatProperties2, ) -> c_void;
fn vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: * const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: * mut VkImageFormatProperties2, ) -> VkResult;
fn vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: * mut u32, pQueueFamilyProperties: * mut VkQueueFamilyProperties2, ) -> c_void;
fn vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: * mut VkPhysicalDeviceMemoryProperties2, ) -> c_void;
fn vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: * const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: * mut u32, pProperties: * mut VkSparseImageFormatProperties2, ) -> c_void;
fn vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: * const VkWriteDescriptorSet, ) -> c_void;
fn vkTrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags, ) -> c_void;
fn vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: * const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: * mut VkExternalBufferProperties, ) -> c_void;
fn vkGetMemoryWin32HandleKHR(device: VkDevice, pGetWin32HandleInfo: * const VkMemoryGetWin32HandleInfoKHR, pHandle: * mut HANDLE, ) -> VkResult;
fn vkGetMemoryWin32HandlePropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: * mut VkMemoryWin32HandlePropertiesKHR, ) -> VkResult;
fn vkGetMemoryFdKHR(device: VkDevice, pGetFdInfo: * const VkMemoryGetFdInfoKHR, pFd: * mut int, ) -> VkResult;
fn vkGetMemoryFdPropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: int, pMemoryFdProperties: * mut VkMemoryFdPropertiesKHR, ) -> VkResult;
fn vkGetMemoryZirconHandleFUCHSIA(device: VkDevice, pGetZirconHandleInfo: * const VkMemoryGetZirconHandleInfoFUCHSIA, pZirconHandle: * mut zx_handle_t, ) -> VkResult;
fn vkGetMemoryZirconHandlePropertiesFUCHSIA(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, zirconHandle: zx_handle_t, pMemoryZirconHandleProperties: * mut VkMemoryZirconHandlePropertiesFUCHSIA, ) -> VkResult;
fn vkGetMemoryRemoteAddressNV(device: VkDevice, pMemoryGetRemoteAddressInfo: * const VkMemoryGetRemoteAddressInfoNV, pAddress: * mut VkRemoteAddressNV, ) -> VkResult;
fn vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: * const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: * mut VkExternalSemaphoreProperties, ) -> c_void;
fn vkGetSemaphoreWin32HandleKHR(device: VkDevice, pGetWin32HandleInfo: * const VkSemaphoreGetWin32HandleInfoKHR, pHandle: * mut HANDLE, ) -> VkResult;
fn vkImportSemaphoreWin32HandleKHR(device: VkDevice, pImportSemaphoreWin32HandleInfo: * const VkImportSemaphoreWin32HandleInfoKHR, ) -> VkResult;
fn vkGetSemaphoreFdKHR(device: VkDevice, pGetFdInfo: * const VkSemaphoreGetFdInfoKHR, pFd: * mut int, ) -> VkResult;
fn vkImportSemaphoreFdKHR(device: VkDevice, pImportSemaphoreFdInfo: * const VkImportSemaphoreFdInfoKHR, ) -> VkResult;
fn vkGetSemaphoreZirconHandleFUCHSIA(device: VkDevice, pGetZirconHandleInfo: * const VkSemaphoreGetZirconHandleInfoFUCHSIA, pZirconHandle: * mut zx_handle_t, ) -> VkResult;
fn vkImportSemaphoreZirconHandleFUCHSIA(device: VkDevice, pImportSemaphoreZirconHandleInfo: * const VkImportSemaphoreZirconHandleInfoFUCHSIA, ) -> VkResult;
fn vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: * const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: * mut VkExternalFenceProperties, ) -> c_void;
fn vkGetFenceWin32HandleKHR(device: VkDevice, pGetWin32HandleInfo: * const VkFenceGetWin32HandleInfoKHR, pHandle: * mut HANDLE, ) -> VkResult;
fn vkImportFenceWin32HandleKHR(device: VkDevice, pImportFenceWin32HandleInfo: * const VkImportFenceWin32HandleInfoKHR, ) -> VkResult;
fn vkGetFenceFdKHR(device: VkDevice, pGetFdInfo: * const VkFenceGetFdInfoKHR, pFd: * mut int, ) -> VkResult;
fn vkImportFenceFdKHR(device: VkDevice, pImportFenceFdInfo: * const VkImportFenceFdInfoKHR, ) -> VkResult;
fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, ) -> VkResult;
fn vkAcquireXlibDisplayEXT(physicalDevice: VkPhysicalDevice, dpy: * mut Display, display: VkDisplayKHR, ) -> VkResult;
fn vkGetRandROutputDisplayEXT(physicalDevice: VkPhysicalDevice, dpy: * mut Display, rrOutput: RROutput, pDisplay: * mut VkDisplayKHR, ) -> VkResult;
fn vkAcquireWinrtDisplayNV(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, ) -> VkResult;
fn vkGetWinrtDisplayNV(physicalDevice: VkPhysicalDevice, deviceRelativeId: u32, pDisplay: * mut VkDisplayKHR, ) -> VkResult;
fn vkDisplayPowerControlEXT(device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: * const VkDisplayPowerInfoEXT, ) -> VkResult;
fn vkRegisterDeviceEventEXT(device: VkDevice, pDeviceEventInfo: * const VkDeviceEventInfoEXT, pAllocator: * const VkAllocationCallbacks, pFence: * mut VkFence, ) -> VkResult;
fn vkRegisterDisplayEventEXT(device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: * const VkDisplayEventInfoEXT, pAllocator: * const VkAllocationCallbacks, pFence: * mut VkFence, ) -> VkResult;
fn vkGetSwapchainCounterEXT(device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: * mut u64, ) -> VkResult;
fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: * mut VkSurfaceCapabilities2EXT, ) -> VkResult;
fn vkEnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: * mut u32, pPhysicalDeviceGroupProperties: * mut VkPhysicalDeviceGroupProperties, ) -> VkResult;
fn vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: * mut VkPeerMemoryFeatureFlags, ) -> c_void;
fn vkBindBufferMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: * const VkBindBufferMemoryInfo, ) -> VkResult;
fn vkBindImageMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: * const VkBindImageMemoryInfo, ) -> VkResult;
fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32, ) -> c_void;
fn vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice, pDeviceGroupPresentCapabilities: * mut VkDeviceGroupPresentCapabilitiesKHR, ) -> VkResult;
fn vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice, surface: VkSurfaceKHR, pModes: * mut VkDeviceGroupPresentModeFlagsKHR, ) -> VkResult;
fn vkAcquireNextImage2KHR(device: VkDevice, pAcquireInfo: * const VkAcquireNextImageInfoKHR, pImageIndex: * mut u32, ) -> VkResult;
fn vkCmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32, ) -> c_void;
fn vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: * mut u32, pRects: * mut VkRect2D, ) -> VkResult;
fn vkCreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: * const VkDescriptorUpdateTemplateCreateInfo, pAllocator: * const VkAllocationCallbacks, pDescriptorUpdateTemplate: * mut VkDescriptorUpdateTemplate, ) -> VkResult;
fn vkDestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkUpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: * const c_void, ) -> c_void;
fn vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: * const c_void, ) -> c_void;
fn vkSetHdrMetadataEXT(device: VkDevice, swapchainCount: u32, pSwapchains: * const VkSwapchainKHR, pMetadata: * const VkHdrMetadataEXT, ) -> c_void;
fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR, ) -> VkResult;
fn vkGetRefreshCycleDurationGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: * mut VkRefreshCycleDurationGOOGLE, ) -> VkResult;
fn vkGetPastPresentationTimingGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: * mut u32, pPresentationTimings: * mut VkPastPresentationTimingGOOGLE, ) -> VkResult;
fn vkCreateIOSSurfaceMVK(instance: VkInstance, pCreateInfo: * const VkIOSSurfaceCreateInfoMVK, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkCreateMacOSSurfaceMVK(instance: VkInstance, pCreateInfo: * const VkMacOSSurfaceCreateInfoMVK, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkCreateMetalSurfaceEXT(instance: VkInstance, pCreateInfo: * const VkMetalSurfaceCreateInfoEXT, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: * const VkViewportWScalingNV, ) -> c_void;
fn vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: * const VkRect2D, ) -> c_void;
fn vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer, pSampleLocationsInfo: * const VkSampleLocationsInfoEXT, ) -> c_void;
fn vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: * mut VkMultisamplePropertiesEXT, ) -> c_void;
fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: * const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: * mut VkSurfaceCapabilities2KHR, ) -> VkResult;
fn vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: * const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: * mut u32, pSurfaceFormats: * mut VkSurfaceFormat2KHR, ) -> VkResult;
fn vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: * mut u32, pProperties: * mut VkDisplayProperties2KHR, ) -> VkResult;
fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: * mut u32, pProperties: * mut VkDisplayPlaneProperties2KHR, ) -> VkResult;
fn vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: * mut u32, pProperties: * mut VkDisplayModeProperties2KHR, ) -> VkResult;
fn vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: * const VkDisplayPlaneInfo2KHR, pCapabilities: * mut VkDisplayPlaneCapabilities2KHR, ) -> VkResult;
fn vkGetBufferMemoryRequirements2(device: VkDevice, pInfo: * const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: * mut VkMemoryRequirements2, ) -> c_void;
fn vkGetImageMemoryRequirements2(device: VkDevice, pInfo: * const VkImageMemoryRequirementsInfo2, pMemoryRequirements: * mut VkMemoryRequirements2, ) -> c_void;
fn vkGetImageSparseMemoryRequirements2(device: VkDevice, pInfo: * const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: * mut u32, pSparseMemoryRequirements: * mut VkSparseImageMemoryRequirements2, ) -> c_void;
fn vkCreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: * const VkSamplerYcbcrConversionCreateInfo, pAllocator: * const VkAllocationCallbacks, pYcbcrConversion: * mut VkSamplerYcbcrConversion, ) -> VkResult;
fn vkDestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetDeviceQueue2(device: VkDevice, pQueueInfo: * const VkDeviceQueueInfo2, pQueue: * mut VkQueue, ) -> c_void;
fn vkCreateValidationCacheEXT(device: VkDevice, pCreateInfo: * const VkValidationCacheCreateInfoEXT, pAllocator: * const VkAllocationCallbacks, pValidationCache: * mut VkValidationCacheEXT, ) -> VkResult;
fn vkDestroyValidationCacheEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetValidationCacheDataEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: * mut usize, pData: * mut c_void, ) -> VkResult;
fn vkMergeValidationCachesEXT(device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: * const VkValidationCacheEXT, ) -> VkResult;
fn vkGetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: * const VkDescriptorSetLayoutCreateInfo, pSupport: * mut VkDescriptorSetLayoutSupport, ) -> c_void;
fn vkGetSwapchainGrallocUsageANDROID(device: VkDevice, format: VkFormat, imageUsage: VkImageUsageFlags, grallocUsage: * mut int, ) -> VkResult;
fn vkGetSwapchainGrallocUsage2ANDROID(device: VkDevice, format: VkFormat, imageUsage: VkImageUsageFlags, swapchainImageUsage: VkSwapchainImageUsageFlagsANDROID, grallocConsumerUsage: * mut u64, grallocProducerUsage: * mut u64, ) -> VkResult;
fn vkAcquireImageANDROID(device: VkDevice, image: VkImage, nativeFenceFd: int, semaphore: VkSemaphore, fence: VkFence, ) -> VkResult;
fn vkQueueSignalReleaseImageANDROID(queue: VkQueue, waitSemaphoreCount: u32, pWaitSemaphores: * const VkSemaphore, image: VkImage, pNativeFenceFd: * mut int, ) -> VkResult;
fn vkGetShaderInfoAMD(device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: * mut usize, pInfo: * mut c_void, ) -> VkResult;
fn vkSetLocalDimmingAMD(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32, ) -> c_void;
fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice, pTimeDomainCount: * mut u32, pTimeDomains: * mut VkTimeDomainEXT, ) -> VkResult;
fn vkGetCalibratedTimestampsEXT(device: VkDevice, timestampCount: u32, pTimestampInfos: * const VkCalibratedTimestampInfoEXT, pTimestamps: * mut u64, pMaxDeviation: * mut u64, ) -> VkResult;
fn vkSetDebugUtilsObjectNameEXT(device: VkDevice, pNameInfo: * const VkDebugUtilsObjectNameInfoEXT, ) -> VkResult;
fn vkSetDebugUtilsObjectTagEXT(device: VkDevice, pTagInfo: * const VkDebugUtilsObjectTagInfoEXT, ) -> VkResult;
fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: * const VkDebugUtilsLabelEXT, ) -> c_void;
fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue, ) -> c_void;
fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: * const VkDebugUtilsLabelEXT, ) -> c_void;
fn vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: * const VkDebugUtilsLabelEXT, ) -> c_void;
fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, ) -> c_void;
fn vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: * const VkDebugUtilsLabelEXT, ) -> c_void;
fn vkCreateDebugUtilsMessengerEXT(instance: VkInstance, pCreateInfo: * const VkDebugUtilsMessengerCreateInfoEXT, pAllocator: * const VkAllocationCallbacks, pMessenger: * mut VkDebugUtilsMessengerEXT, ) -> VkResult;
fn vkDestroyDebugUtilsMessengerEXT(instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkSubmitDebugUtilsMessageEXT(instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: * const VkDebugUtilsMessengerCallbackDataEXT, ) -> c_void;
fn vkGetMemoryHostPointerPropertiesEXT(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: * const c_void, pMemoryHostPointerProperties: * mut VkMemoryHostPointerPropertiesEXT, ) -> VkResult;
fn vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32, ) -> c_void;
fn vkCreateRenderPass2(device: VkDevice, pCreateInfo: * const VkRenderPassCreateInfo2, pAllocator: * const VkAllocationCallbacks, pRenderPass: * mut VkRenderPass, ) -> VkResult;
fn vkCmdBeginRenderPass2(commandBuffer: VkCommandBuffer, pRenderPassBegin: * const VkRenderPassBeginInfo, pSubpassBeginInfo: * const VkSubpassBeginInfo, ) -> c_void;
fn vkCmdNextSubpass2(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: * const VkSubpassBeginInfo, pSubpassEndInfo: * const VkSubpassEndInfo, ) -> c_void;
fn vkCmdEndRenderPass2(commandBuffer: VkCommandBuffer, pSubpassEndInfo: * const VkSubpassEndInfo, ) -> c_void;
fn vkGetSemaphoreCounterValue(device: VkDevice, semaphore: VkSemaphore, pValue: * mut u64, ) -> VkResult;
fn vkWaitSemaphores(device: VkDevice, pWaitInfo: * const VkSemaphoreWaitInfo, timeout: u64, ) -> VkResult;
fn vkSignalSemaphore(device: VkDevice, pSignalInfo: * const VkSemaphoreSignalInfo, ) -> VkResult;
fn vkGetAndroidHardwareBufferPropertiesANDROID(device: VkDevice, buffer: * const AHardwareBuffer, pProperties: * mut VkAndroidHardwareBufferPropertiesANDROID, ) -> VkResult;
fn vkGetMemoryAndroidHardwareBufferANDROID(device: VkDevice, pInfo: * const VkMemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: * mut * mut AHardwareBuffer, ) -> VkResult;
fn vkCmdDrawIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32, ) -> c_void;
fn vkCmdDrawIndexedIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32, ) -> c_void;
fn vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer, pCheckpointMarker: * const c_void, ) -> c_void;
fn vkGetQueueCheckpointDataNV(queue: VkQueue, pCheckpointDataCount: * mut u32, pCheckpointData: * mut VkCheckpointDataNV, ) -> c_void;
fn vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: * const VkBuffer, pOffsets: * const VkDeviceSize, pSizes: * const VkDeviceSize, ) -> c_void;
fn vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: * const VkBuffer, pCounterBufferOffsets: * const VkDeviceSize, ) -> c_void;
fn vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: * const VkBuffer, pCounterBufferOffsets: * const VkDeviceSize, ) -> c_void;
fn vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32, ) -> c_void;
fn vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32, ) -> c_void;
fn vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32, ) -> c_void;
fn vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: * const VkRect2D, ) -> c_void;
fn vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout, ) -> c_void;
fn vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: * const VkShadingRatePaletteNV, ) -> c_void;
fn vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: * const VkCoarseSampleOrderCustomNV, ) -> c_void;
fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32, ) -> c_void;
fn vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32, ) -> c_void;
fn vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32, ) -> c_void;
fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32, ) -> VkResult;
fn vkCreateAccelerationStructureNV(device: VkDevice, pCreateInfo: * const VkAccelerationStructureCreateInfoNV, pAllocator: * const VkAllocationCallbacks, pAccelerationStructure: * mut VkAccelerationStructureNV, ) -> VkResult;
fn vkCmdBindInvocationMaskHUAWEI(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout, ) -> c_void;
fn vkDestroyAccelerationStructureKHR(device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkDestroyAccelerationStructureNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice, pInfo: * const VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: * mut VkMemoryRequirements2KHR, ) -> c_void;
fn vkBindAccelerationStructureMemoryNV(device: VkDevice, bindInfoCount: u32, pBindInfos: * const VkBindAccelerationStructureMemoryInfoNV, ) -> VkResult;
fn vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR, ) -> c_void;
fn vkCmdCopyAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: * const VkCopyAccelerationStructureInfoKHR, ) -> c_void;
fn vkCopyAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: * const VkCopyAccelerationStructureInfoKHR, ) -> VkResult;
fn vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer: VkCommandBuffer, pInfo: * const VkCopyAccelerationStructureToMemoryInfoKHR, ) -> c_void;
fn vkCopyAccelerationStructureToMemoryKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: * const VkCopyAccelerationStructureToMemoryInfoKHR, ) -> VkResult;
fn vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: * const VkCopyMemoryToAccelerationStructureInfoKHR, ) -> c_void;
fn vkCopyMemoryToAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: * const VkCopyMemoryToAccelerationStructureInfoKHR, ) -> VkResult;
fn vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: * const VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32, ) -> c_void;
fn vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: * const VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32, ) -> c_void;
fn vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer, pInfo: * const VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize, ) -> c_void;
fn vkWriteAccelerationStructuresPropertiesKHR(device: VkDevice, accelerationStructureCount: u32, pAccelerationStructures: * const VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: usize, pData: * mut c_void, stride: usize, ) -> VkResult;
fn vkCmdTraceRaysKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32, ) -> c_void;
fn vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32, ) -> c_void;
fn vkGetRayTracingShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: * mut c_void, ) -> VkResult;
fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: * mut c_void, ) -> VkResult;
fn vkGetAccelerationStructureHandleNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: usize, pData: * mut c_void, ) -> VkResult;
fn vkCreateRayTracingPipelinesNV(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: * const VkRayTracingPipelineCreateInfoNV, pAllocator: * const VkAllocationCallbacks, pPipelines: * mut VkPipeline, ) -> VkResult;
fn vkCreateRayTracingPipelinesKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: * const VkRayTracingPipelineCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pPipelines: * mut VkPipeline, ) -> VkResult;
fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: * mut u32, pProperties: * mut VkCooperativeMatrixPropertiesNV, ) -> VkResult;
fn vkCmdTraceRaysIndirectKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: * const VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress, ) -> c_void;
fn vkGetDeviceAccelerationStructureCompatibilityKHR(device: VkDevice, pVersionInfo: * const VkAccelerationStructureVersionInfoKHR, pCompatibility: * mut VkAccelerationStructureCompatibilityKHR, ) -> c_void;
fn vkGetRayTracingShaderGroupStackSizeKHR(device: VkDevice, pipeline: VkPipeline, group: u32, groupShader: VkShaderGroupShaderKHR, ) -> VkDeviceSize;
fn vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer: VkCommandBuffer, pipelineStackSize: u32, ) -> c_void;
fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: * const VkImageViewHandleInfoNVX, ) -> u32;
fn vkGetImageViewAddressNVX(device: VkDevice, imageView: VkImageView, pProperties: * mut VkImageViewAddressPropertiesNVX, ) -> VkResult;
fn vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice: VkPhysicalDevice, pSurfaceInfo: * const VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: * mut u32, pPresentModes: * mut VkPresentModeKHR, ) -> VkResult;
fn vkGetDeviceGroupSurfacePresentModes2EXT(device: VkDevice, pSurfaceInfo: * const VkPhysicalDeviceSurfaceInfo2KHR, pModes: * mut VkDeviceGroupPresentModeFlagsKHR, ) -> VkResult;
fn vkAcquireFullScreenExclusiveModeEXT(device: VkDevice, swapchain: VkSwapchainKHR, ) -> VkResult;
fn vkReleaseFullScreenExclusiveModeEXT(device: VkDevice, swapchain: VkSwapchainKHR, ) -> VkResult;
fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, pCounterCount: * mut u32, pCounters: * mut VkPerformanceCounterKHR, pCounterDescriptions: * mut VkPerformanceCounterDescriptionKHR, ) -> VkResult;
fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: * const VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: * mut u32, ) -> c_void;
fn vkAcquireProfilingLockKHR(device: VkDevice, pInfo: * const VkAcquireProfilingLockInfoKHR, ) -> VkResult;
fn vkReleaseProfilingLockKHR(device: VkDevice, ) -> c_void;
fn vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice, image: VkImage, pProperties: * mut VkImageDrmFormatModifierPropertiesEXT, ) -> VkResult;
fn vkGetBufferOpaqueCaptureAddress(device: VkDevice, pInfo: * const VkBufferDeviceAddressInfo, ) -> u64;
fn vkGetBufferDeviceAddress(device: VkDevice, pInfo: * const VkBufferDeviceAddressInfo, ) -> VkDeviceAddress;
fn vkCreateHeadlessSurfaceEXT(instance: VkInstance, pCreateInfo: * const VkHeadlessSurfaceCreateInfoEXT, pAllocator: * const VkAllocationCallbacks, pSurface: * mut VkSurfaceKHR, ) -> VkResult;
fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice, pCombinationCount: * mut u32, pCombinations: * mut VkFramebufferMixedSamplesCombinationNV, ) -> VkResult;
fn vkInitializePerformanceApiINTEL(device: VkDevice, pInitializeInfo: * const VkInitializePerformanceApiInfoINTEL, ) -> VkResult;
fn vkUninitializePerformanceApiINTEL(device: VkDevice, ) -> c_void;
fn vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: * const VkPerformanceMarkerInfoINTEL, ) -> VkResult;
fn vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: * const VkPerformanceStreamMarkerInfoINTEL, ) -> VkResult;
fn vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer, pOverrideInfo: * const VkPerformanceOverrideInfoINTEL, ) -> VkResult;
fn vkAcquirePerformanceConfigurationINTEL(device: VkDevice, pAcquireInfo: * const VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: * mut VkPerformanceConfigurationINTEL, ) -> VkResult;
fn vkReleasePerformanceConfigurationINTEL(device: VkDevice, configuration: VkPerformanceConfigurationINTEL, ) -> VkResult;
fn vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue, configuration: VkPerformanceConfigurationINTEL, ) -> VkResult;
fn vkGetPerformanceParameterINTEL(device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: * mut VkPerformanceValueINTEL, ) -> VkResult;
fn vkGetDeviceMemoryOpaqueCaptureAddress(device: VkDevice, pInfo: * const VkDeviceMemoryOpaqueCaptureAddressInfo, ) -> u64;
fn vkGetPipelineExecutablePropertiesKHR(device: VkDevice, pPipelineInfo: * const VkPipelineInfoKHR, pExecutableCount: * mut u32, pProperties: * mut VkPipelineExecutablePropertiesKHR, ) -> VkResult;
fn vkGetPipelineExecutableStatisticsKHR(device: VkDevice, pExecutableInfo: * const VkPipelineExecutableInfoKHR, pStatisticCount: * mut u32, pStatistics: * mut VkPipelineExecutableStatisticKHR, ) -> VkResult;
fn vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice, pExecutableInfo: * const VkPipelineExecutableInfoKHR, pInternalRepresentationCount: * mut u32, pInternalRepresentations: * mut VkPipelineExecutableInternalRepresentationKHR, ) -> VkResult;
fn vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16, ) -> c_void;
fn vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice: VkPhysicalDevice, pToolCount: * mut u32, pToolProperties: * mut VkPhysicalDeviceToolPropertiesEXT, ) -> VkResult;
fn vkCreateAccelerationStructureKHR(device: VkDevice, pCreateInfo: * const VkAccelerationStructureCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pAccelerationStructure: * mut VkAccelerationStructureKHR, ) -> VkResult;
fn vkCmdBuildAccelerationStructuresKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: * const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: * const * const VkAccelerationStructureBuildRangeInfoKHR, ) -> c_void;
fn vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: * const VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: * const VkDeviceAddress, pIndirectStrides: * const u32, ppMaxPrimitiveCounts: * const * const u32, ) -> c_void;
fn vkBuildAccelerationStructuresKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: u32, pInfos: * const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: * const * const VkAccelerationStructureBuildRangeInfoKHR, ) -> VkResult;
fn vkGetAccelerationStructureDeviceAddressKHR(device: VkDevice, pInfo: * const VkAccelerationStructureDeviceAddressInfoKHR, ) -> VkDeviceAddress;
fn vkCreateDeferredOperationKHR(device: VkDevice, pAllocator: * const VkAllocationCallbacks, pDeferredOperation: * mut VkDeferredOperationKHR, ) -> VkResult;
fn vkDestroyDeferredOperationKHR(device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetDeferredOperationMaxConcurrencyKHR(device: VkDevice, operation: VkDeferredOperationKHR, ) -> u32;
fn vkGetDeferredOperationResultKHR(device: VkDevice, operation: VkDeferredOperationKHR, ) -> VkResult;
fn vkDeferredOperationJoinKHR(device: VkDevice, operation: VkDeferredOperationKHR, ) -> VkResult;
fn vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags, ) -> c_void;
fn vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace, ) -> c_void;
fn vkCmdSetPrimitiveTopologyEXT(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology, ) -> c_void;
fn vkCmdSetViewportWithCountEXT(commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: * const VkViewport, ) -> c_void;
fn vkCmdSetScissorWithCountEXT(commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: * const VkRect2D, ) -> c_void;
fn vkCmdBindVertexBuffers2EXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: * const VkBuffer, pOffsets: * const VkDeviceSize, pSizes: * const VkDeviceSize, pStrides: * const VkDeviceSize, ) -> c_void;
fn vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32, ) -> c_void;
fn vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32, ) -> c_void;
fn vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp, ) -> c_void;
fn vkCmdSetDepthBoundsTestEnableEXT(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32, ) -> c_void;
fn vkCmdSetStencilTestEnableEXT(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32, ) -> c_void;
fn vkCmdSetStencilOpEXT(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp, ) -> c_void;
fn vkCmdSetPatchControlPointsEXT(commandBuffer: VkCommandBuffer, patchControlPoints: u32, ) -> c_void;
fn vkCmdSetRasterizerDiscardEnableEXT(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32, ) -> c_void;
fn vkCmdSetDepthBiasEnableEXT(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32, ) -> c_void;
fn vkCmdSetLogicOpEXT(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp, ) -> c_void;
fn vkCmdSetPrimitiveRestartEnableEXT(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32, ) -> c_void;
fn vkCreatePrivateDataSlotEXT(device: VkDevice, pCreateInfo: * const VkPrivateDataSlotCreateInfoEXT, pAllocator: * const VkAllocationCallbacks, pPrivateDataSlot: * mut VkPrivateDataSlotEXT, ) -> VkResult;
fn vkDestroyPrivateDataSlotEXT(device: VkDevice, privateDataSlot: VkPrivateDataSlotEXT, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkSetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlotEXT, data: u64, ) -> VkResult;
fn vkGetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlotEXT, pData: * mut u64, ) -> c_void;
fn vkCmdCopyBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyBufferInfo: * const VkCopyBufferInfo2KHR, ) -> c_void;
fn vkCmdCopyImage2KHR(commandBuffer: VkCommandBuffer, pCopyImageInfo: * const VkCopyImageInfo2KHR, ) -> c_void;
fn vkCmdBlitImage2KHR(commandBuffer: VkCommandBuffer, pBlitImageInfo: * const VkBlitImageInfo2KHR, ) -> c_void;
fn vkCmdCopyBufferToImage2KHR(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: * const VkCopyBufferToImageInfo2KHR, ) -> c_void;
fn vkCmdCopyImageToBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: * const VkCopyImageToBufferInfo2KHR, ) -> c_void;
fn vkCmdResolveImage2KHR(commandBuffer: VkCommandBuffer, pResolveImageInfo: * const VkResolveImageInfo2KHR, ) -> c_void;
fn vkCmdSetFragmentShadingRateKHR(commandBuffer: VkCommandBuffer, pFragmentSize: * const VkExtent2D, combinerOps: const VkFragmentShadingRateCombinerOpKHR, ) -> c_void;
fn vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: * mut u32, pFragmentShadingRates: * mut VkPhysicalDeviceFragmentShadingRateKHR, ) -> VkResult;
fn vkCmdSetFragmentShadingRateEnumNV(commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: const VkFragmentShadingRateCombinerOpKHR, ) -> c_void;
fn vkGetAccelerationStructureBuildSizesKHR(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: * const VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: * const u32, pSizeInfo: * mut VkAccelerationStructureBuildSizesInfoKHR, ) -> c_void;
fn vkCmdSetVertexInputEXT(commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: u32, pVertexBindingDescriptions: * const VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: u32, pVertexAttributeDescriptions: * const VkVertexInputAttributeDescription2EXT, ) -> c_void;
fn vkCmdSetColorWriteEnableEXT(commandBuffer: VkCommandBuffer, attachmentCount: u32, pColorWriteEnables: * const VkBool32, ) -> c_void;
fn vkCmdSetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: * const VkDependencyInfoKHR, ) -> c_void;
fn vkCmdResetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2KHR, ) -> c_void;
fn vkCmdWaitEvents2KHR(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: * const VkEvent, pDependencyInfos: * const VkDependencyInfoKHR, ) -> c_void;
fn vkCmdPipelineBarrier2KHR(commandBuffer: VkCommandBuffer, pDependencyInfo: * const VkDependencyInfoKHR, ) -> c_void;
fn vkQueueSubmit2KHR(queue: VkQueue, submitCount: u32, pSubmits: * const VkSubmitInfo2KHR, fence: VkFence, ) -> VkResult;
fn vkCmdWriteTimestamp2KHR(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2KHR, queryPool: VkQueryPool, query: u32, ) -> c_void;
fn vkCmdWriteBufferMarker2AMD(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2KHR, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32, ) -> c_void;
fn vkGetQueueCheckpointData2NV(queue: VkQueue, pCheckpointDataCount: * mut u32, pCheckpointData: * mut VkCheckpointData2NV, ) -> c_void;
fn vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice: VkPhysicalDevice, pVideoProfile: * const VkVideoProfileKHR, pCapabilities: * mut VkVideoCapabilitiesKHR, ) -> VkResult;
fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice: VkPhysicalDevice, pVideoFormatInfo: * const VkPhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: * mut u32, pVideoFormatProperties: * mut VkVideoFormatPropertiesKHR, ) -> VkResult;
fn vkCreateVideoSessionKHR(device: VkDevice, pCreateInfo: * const VkVideoSessionCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pVideoSession: * mut VkVideoSessionKHR, ) -> VkResult;
fn vkDestroyVideoSessionKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCreateVideoSessionParametersKHR(device: VkDevice, pCreateInfo: * const VkVideoSessionParametersCreateInfoKHR, pAllocator: * const VkAllocationCallbacks, pVideoSessionParameters: * mut VkVideoSessionParametersKHR, ) -> VkResult;
fn vkUpdateVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pUpdateInfo: * const VkVideoSessionParametersUpdateInfoKHR, ) -> VkResult;
fn vkDestroyVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkGetVideoSessionMemoryRequirementsKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pVideoSessionMemoryRequirementsCount: * mut u32, pVideoSessionMemoryRequirements: * mut VkVideoGetMemoryPropertiesKHR, ) -> VkResult;
fn vkBindVideoSessionMemoryKHR(device: VkDevice, videoSession: VkVideoSessionKHR, videoSessionBindMemoryCount: u32, pVideoSessionBindMemories: * const VkVideoBindMemoryKHR, ) -> VkResult;
fn vkCmdDecodeVideoKHR(commandBuffer: VkCommandBuffer, pFrameInfo: * const VkVideoDecodeInfoKHR, ) -> c_void;
fn vkCmdBeginVideoCodingKHR(commandBuffer: VkCommandBuffer, pBeginInfo: * const VkVideoBeginCodingInfoKHR, ) -> c_void;
fn vkCmdControlVideoCodingKHR(commandBuffer: VkCommandBuffer, pCodingControlInfo: * const VkVideoCodingControlInfoKHR, ) -> c_void;
fn vkCmdEndVideoCodingKHR(commandBuffer: VkCommandBuffer, pEndCodingInfo: * const VkVideoEndCodingInfoKHR, ) -> c_void;
fn vkCmdEncodeVideoKHR(commandBuffer: VkCommandBuffer, pEncodeInfo: * const VkVideoEncodeInfoKHR, ) -> c_void;
fn vkCreateCuModuleNVX(device: VkDevice, pCreateInfo: * const VkCuModuleCreateInfoNVX, pAllocator: * const VkAllocationCallbacks, pModule: * mut VkCuModuleNVX, ) -> VkResult;
fn vkCreateCuFunctionNVX(device: VkDevice, pCreateInfo: * const VkCuFunctionCreateInfoNVX, pAllocator: * const VkAllocationCallbacks, pFunction: * mut VkCuFunctionNVX, ) -> VkResult;
fn vkDestroyCuModuleNVX(device: VkDevice, module: VkCuModuleNVX, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkDestroyCuFunctionNVX(device: VkDevice, function: VkCuFunctionNVX, pAllocator: * const VkAllocationCallbacks, ) -> c_void;
fn vkCmdCuLaunchKernelNVX(commandBuffer: VkCommandBuffer, pLaunchInfo: * const VkCuLaunchInfoNVX, ) -> c_void;
fn vkSetDeviceMemoryPriorityEXT(device: VkDevice, memory: VkDeviceMemory, priority: f32, ) -> c_void;
fn vkAcquireDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, display: VkDisplayKHR, ) -> VkResult;
fn vkGetDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, connectorId: u32, display: * mut VkDisplayKHR, ) -> VkResult;
fn vkWaitForPresentKHR(device: VkDevice, swapchain: VkSwapchainKHR, presentId: u64, timeout: u64, ) -> VkResult;

